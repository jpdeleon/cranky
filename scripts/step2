#!/usr/bin/env python
'''
After running `step1` script, this script follows.
`step2` basically does the ff:
* load the output of step1: detrended*.txt
* searches for periodicity using LombScargle and plots it
* esitmates t0 and k
 - try changing: tupper=t[200]
* calculates tns and plots it
* phase-folds lightcurve given tns and period
* estimates transit params using MLE
 - try changing method: 'powell, neldermead, bfgs, cg'
* plots the model given optimized params

'''
from os.path import join, isfile, exists
from os import makedirs
import numpy as np
import sys
#import getpass
import argparse
import matplotlib.pyplot as pl
from k2crank.auxiliaries import *

from k2crank.periodfinder import *
from k2crank.findplanet import *

#from k2crank.model_transits import *
#import periodfinder
#import model_transits

from k2crank.run_pipeline import run

parser = argparse.ArgumentParser(description="""
                simple planet finder""",
                usage='use "%(prog)s --help" for more information',
                formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('-i', help='path to file',
    type=str, default='./')
parser.add_argument('-o', help='output directory (default: output/)',
    type=str, default='output2/')
#parser.add_argument('-name', help='star name',
#    type=str, default='', required=True)
parser.add_argument('-showfig', help='show all plots',action='store_true',default=False)

args = parser.parse_args()
outputpath = args.o
#starname=args.name
showfig=args.showfig

if isfile(args.i):
    inputpath = args.i
else:
    print('{} does not exist'.format(args.i))
    sys.exit()

starname=inputpath.split('/')[-1].split('_')[-1].split('.')[0]
#print(starname)
outputfolder=join(outputpath,starname)

if exists(outputfolder):
  ans = query_yes_no('Directory not empty.\nSave output in {}?'.format(outputfolder))
  if ans:
      pass
  else:
      sys.exit()
else:
    makedirs(outputfolder)

print('\n-----------------------')
print('Analyzing EPIC {}'.format(starname))
print('-----------------------\n')

#method for MLE
method='powell'
use_BLS = True
try:
  lc = np.loadtxt(inputpath,comments='#',delimiter=' ', dtype=float)

  t,f=lc[:,0],lc[:,1]
  #print(len(t),len(f))

  #optional: used for second-pass modeling
  # try:
  #     x,y=lc[:,2],lc[:,3]
  # except:
  #     print('No x, y column in the input file')

  plot_raw_lc(t,f,outputfolder=outputfolder,starname=starname)
  print('checking period')
  if use_BLS:
      folded,t_folded,period,freqlist,powers = get_period(t,f,[],
                                            get_mandelagolmodel=False,
                                            outputpath=outputpath,
                                            starname=starname)
  else: #Lomb-Scargle periodogram
      period,powers=find_period(t,f,outputfolder=outputfolder,starname=starname)

  print(period)
  print('estimating k')
  k=estimate_k(t,f,period)
  print(k)
  print('estimating t0')
  t0 = estimate_t0(t,f,tlower=t[0],tupper=t[150],showfig=True,outputfolder=outputfolder,starname=starname)
  print(t0)
  print('calculating tns')
  tns=get_tns(t, period, t0)
  plot_tns(tns,t, f,f1=0.975,f2=0.98,outputfolder=outputfolder,starname=starname)
  print('folding lc')
  plot_folded_lc(t,f,period,t0,outputfolder=outputfolder,starname=starname)

  p = period
  k = estimate_k(t,f,p)
  b = 0.1
  #estimate initial for t14
  t14 = estimate_t14()
  a_au = scaled_a(p, t14, k, b=b)
  t14 = t14_circ(p, a_au, k, b=b)
  #i = inclination(a_au, b=b) #np.pi/2.

  q1,q2 = 0.2,0.2
  sig = f.std()

  initial = k,t0,p,a_au,b,q1,q2,sig
  args = (t, f)

  print('estimating transit parameters')
  opt=fit_folded_lc(initial, args, method=method)
  rms=plot_fit(opt.x,t,f,outputfolder=outputfolder,starname=starname)

  print('\ncreating summary figure')
  summarize(opt.x,args,minimum=3,outputfolder=outputfolder,starname=starname)
  #combo figure
  #folded,t_folded,period,freqlist,powers = get_period(t,f,opt.x,get_mandelagolmodel=True,outputpath=outputpath,starname=starname)
  #np.savetxt(join(outputpath, starname+'/powerspectrum_' + str(starname) + '.txt'),np.transpose([freqlist,powers]),header='Frequencies, Powers')
  #make_combo_figure(t,f,period,freqlist,powers,starname=starname,outputpath=outputpath)

except Exception as inst:
  print('Module failed: {}'.format(inst))

if showfig:
  pl.show() # comment out to keep things running for multiple stars
pl.close('all')

names='k,t0,p,a,b,u1,u2,sigma,inc,tshape,k_max,snr,rms'.split(',')
head = 'EPIC{}\noptimized values: MLE ({})\n {}'.format(starname,method,names)
fname=join(outputpath,starname,'optimized_params_' + str(starname) + '.csv')

#calculate some useful params
snr= np.max(powers)/np.median(powers)
inc=np.rad2deg(inclination(a_au, b))
tshape=tshape_approx(a_au, k, b)
k_max=max_k(tshape)
print('\ninc={0:.1f} deg\nsnr={1:.2f}\ntshape={2:.3f}\nk_max={3:.3f}\nrms={4:.3f}%\n'.format(
                                        inc,snr,tshape,k_max,rms*100))
data = np.concatenate((opt.x,[inc,tshape,k_max,snr,rms]),axis=0)
np.savetxt(fname,data.reshape(1,-1),delimiter=',',header=head,fmt='%f')
print('Saved: {}'.format(fname))

if snr > 4:
    print('-------------------------------')
    print('        SNR > {0:.3f}      '.format(snr))
    print('-------------------------------')

print('-----------------------')
print('          DONE')
print('-----------------------\n')
